--- venv/lib/python3.6/site-packages/mxnet/contrib/onnx/mx2onnx/_op_translations.py	2022-02-14 16:49:19.812125005 +0300
+++ patch_files/mx2onnx/_op_translations.py	2022-02-14 16:48:16.812498921 +0300
@@ -353,10 +353,11 @@
         [name],
         name=name,
         epsilon=eps,
-        momentum=momentum,
-        # MXNet computes mean and variance per feature for batchnorm
-        # Default for onnx is across all spatial features. So disabling the parameter.
-        spatial=0
+        momentum=momentum
+        # MXNet computes mean and variance per channel for batchnorm.
+        # Default for onnx is across all spatial features. Relying on default
+        # ONNX behavior of spatial=1 for ONNX opset 8 and below. As the spatial
+        # attribute is deprecated in opset 9 and above, not explicitly encoding it.
     )
     return [bn_node]
 
@@ -755,6 +756,7 @@
     based on the input node's attributes and return the created node.
     """
     name, input_nodes, attrs = get_inputs(node, kwargs)
+    initializer = kwargs["initializer"]
 
     act_type = attrs.get("act_type", "leaky")
     alpha = float(attrs.get("slope", 0.25))
@@ -762,12 +764,46 @@
     act_name = {"elu": "Elu", "leaky": "LeakyRelu", "prelu": "PRelu",
                 "selu": "Selu"}
 
+    reshape_val_name = 'reshape' + str(kwargs["idx"])
+    input_type = onnx.mapping.NP_TYPE_TO_TENSOR_TYPE[np.dtype('int64')]
+
+    reshape_value = np.array([1, -1, 1, 1], dtype='int64')
+    dims = np.shape(reshape_value)
+
+    shape_node = onnx.helper.make_tensor_value_info(reshape_val_name, input_type, dims)
+    initializer.append(
+        onnx.helper.make_tensor(
+            name=reshape_val_name,
+            data_type=input_type,
+            dims=dims,
+            vals=reshape_value,
+            raw=False,
+        )
+    )
+
+    slope_op_name = 'slope' + str(kwargs["idx"])
+
+    lr_node = []
+
     if act_type in ("prelu", "selu"):
+        reshape_slope_node = onnx.helper.make_node(
+            'Reshape',
+            inputs=[input_nodes[1], reshape_val_name],
+            outputs=[slope_op_name],
+            name=slope_op_name
+        )
+
+
         node = onnx.helper.make_node(
             act_name[act_type],
-            inputs=input_nodes,
+            inputs=[input_nodes[0], slope_op_name],
             outputs=[name],
             name=name)
+
+        lr_node.append(shape_node)
+        lr_node.append(reshape_slope_node)
+        lr_node.append(node)
+
     else:
         node = onnx.helper.make_node(
             act_name[act_type],
@@ -776,7 +812,8 @@
             name=name,
             alpha=alpha)
 
-    return [node]
+        lr_node.append(node)
+    return lr_node
 
 
 @mx_op.register("softmax")
